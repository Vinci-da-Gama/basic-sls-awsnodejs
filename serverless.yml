# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awsnodejs-auction
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iam:
    role:
      statements:
        - ${file(ymls/iam/AuctionsTableIAM.yml):AuctionsTableIAM}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: src/handlers/hello.helloHandler
    events:
      - http:
          path: /hello
          method: GET

  createAuction:
    handler: src/handlers/createAuction.createAuctionHandler
    events:
      - http:
          path: /auction
          method: POST
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.getAuctionsHandler
    events:
      - http:
          path: /auctions
          method: GET
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.getAuctionHandler
    events:
      - http:
          path: /auction/{id}
          method: GET
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.placeBidHandler
    events:
      - http:
          path: /auction/{id}/bid
          method: PATCH
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.processAuctionsHandler
    # events:
    #   - schedule: rate(1 minute)
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
  AuctionsTable: ${file(ymls/resources/AuctionsTable.yml):AuctionsTable}
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth0-service-${self:provider.stage}-auth
  AuctionsTable: ${file(ymls/custom/AuctionsTable.yml):AuctionsTable}
